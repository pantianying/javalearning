/*
一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。

示例 1：
输入：nums = [4,1,4,6]
输出：[1,6] 或 [6,1]

示例 2：
输入：nums = [1,2,10,4,1,4,3,3]
输出：[2,10] 或 [10,2]

限制：
2 <= nums <= 10000
*/
package main

func main() {

}

// 这题主要考了异乎、与运算 超过我的射程
func singleNumbers(nums []int) []int {
	// 此题是找一个孤立值的变种，关键在于拆分问题，如何分组
	var a int
	for _, v := range nums {
		a ^= v
	}

	// 就是二进制数低位连续的0加上一个1组成的数
	// 也可以理解成来一个数由2构成的最大约数
	// 比如自 20
	// 转换成二进制就是10100(2) 最低位有2个0 那20&(-20)就是100(2)，就是4
	mask := a & (-a)

	ans := make([]int, 2)
	for _, v := range nums {
		if v&mask == 0 { // 此处进行分组
			ans[0] ^= v // 不用给每个组分配多余的空间，只要把这个组中所有的数异或起来，就能得到那个孤立的数
		} else {
			ans[1] ^= v
		}
	}
	return ans
}
